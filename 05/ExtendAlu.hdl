// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).


// The ExtendAlu chip is an extension of the standard ALU which also supports
// shift operations.
// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The "ng" and "zr" output pins behave the same as in the regular ALU.
// The "out" output is defined as follows:
// If instruction[8]=1 and instruction[7]=1 the output is identical to the 
// regular ALU, where:
// instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no
// Else, if instruction[8]=0 and instruction[7]=1, the output is a shift:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x".
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.
// - All other inputs are undefined.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1], no=instruction[0],
          out=alu-out, zr=alu-zr, ng=alu-ng);
     Mux4Way16(a[0..14]=y[1..15], a[15]=y[15], b[0..14]=x[1..15], b[15]=x[15],
          c[1..15]=y[0..14], c[0]=false, d[1..15]=x[0..14], d[0]=false,
          sel=instruction[4..5], out[0..7]=shift-out1, out[8..15]=shift-out2, out=shift-out, out[15]=shift-ng);
     Or8Way(in=shift-out1, out=not-shift-zr1);
     Or8Way(in=shift-out2, out=not-shift-zr2);
     Or(a=not-shift-zr1, b=not-shift-zr2, out=not-shift-zr);
     Not(in=not-shift-zr, out=shift-zr);
     Mux(a=shift-zr, b=alu-zr, sel=instruction[8], out=zr);
     Mux(a=shift-ng, b=alu-ng, sel=instruction[8], out=ng);
     Mux16(a=shift-out, b=alu-out, sel=instruction[8], out=out);
}
