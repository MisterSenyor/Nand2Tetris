// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // instruction flags
    Or16(a=instruction, b[0..15]=false, out[0]=jump-gt, out[1]=jump-eq, out[2]=jump-lt,
        out[3]=dest-m, out[4]=dest-d, out[5]=dest-a,
        out[6]=no, out[7]=f, out[8]=ny, out[9]=zy, out[10]=nx, out[11]=zx, out[12]=use-m, out[15]=c-type);
    Mux16(a=a-value, b=inM, sel=use-m, out=alu-operand-value);

    // jump
    And(a=zr, b=jump-eq, out=jump1);
    And(a=ng, b=jump-lt, out=jump2);
    Or(a=zr, b=ng, out=not-pos);
    Not(in=not-pos, out=pos);
    And(a=pos, b=jump-gt, out=jump3);
    Or8Way(in[0]=jump1, in[1]=jump2, in[2]=jump3, in[3..7]=false, out=jump4);
    And(a=jump4, b=c-type, out=jump);
    
    // enable write to A,D,M
    Mux(a=true, b=dest-a, sel=c-type, out=a-write);
    And(a=dest-m, b=c-type, out=writeM);
    And(a=dest-d, b=c-type, out=write-d);

    // A register
    Mux16(a=instruction, b=alu-out, sel=c-type, out=a-in);
    ARegister(in=a-in, load=a-write, out=a-value, out[0..14]=addressM);
    // D register
    DRegister(in=alu-out, load=write-d, out=d-value);
    ALU(x=d-value, y=alu-operand-value, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=alu-out, out=outM, zr=zr, ng=ng);
    // if reset == load == false, always inc
    PC(in=a-value, load=jump, inc=true, reset=reset, out[0..14]=pc);
}